
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://upaxlykqpbpvwsprcrtu.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVwYXhseWtxcGJwdndzcHJjcnR1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkwNjY5NzAsImV4cCI6MjA2NDY0Mjk3MH0.PJWg_lEj_3JaYJ4LYypJ0e8_RWWSF2eFCrQdlDfpQX8";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function to check authentication
export const requireAuth = async () => {
  const { data: { user }, error } = await supabase.auth.getUser();
  if (error || !user) {
    throw new Error('Authentication required');
  }
  return user;
};

// Admin-only function to create new users (both auth and database)
export const createUserAsAdmin = async (userData: {
  email: string;
  password: string;
  name: string;
  phone?: string;
  role_id: number;
  status?: string;
}) => {
  try {
    console.log('Admin creating new user:', userData.email);
    
    // Create auth user without automatic login
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email: userData.email,
      password: userData.password,
      options: {
        data: {
          name: userData.name,
          phone: userData.phone || '',
        }
      }
    });

    if (authError) {
      console.error('Error creating auth user:', authError);
      throw new Error(`Failed to create auth account: ${authError.message}`);
    }

    if (!authData.user) {
      throw new Error('Failed to create auth user - no user returned');
    }

    // Create database user record
    const { data: dbUser, error: dbError } = await supabase
      .from('users')
      .insert({
        auth_user_id: authData.user.id,
        name: userData.name,
        email: userData.email,
        phone: userData.phone || '',
        role_id: userData.role_id,
        status: userData.status || 'Active',
      })
      .select()
      .single();

    if (dbError) {
      console.error('Error creating database user:', dbError);
      // If database user creation fails, we should clean up the auth user
      // Note: This requires service role permissions in production
      throw new Error(`Failed to create user record: ${dbError.message}`);
    }

    console.log('Successfully created user:', dbUser);
    return {
      authUser: authData.user,
      dbUser: dbUser,
    };
  } catch (error) {
    console.error('Error in createUserAsAdmin:', error);
    throw error;
  }
};
