
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://upaxlykqpbpvwsprcrtu.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVwYXhseWtxcGJwdndzcHJjcnR1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkwNjY5NzAsImV4cCI6MjA2NDY0Mjk3MH0.PJWg_lEj_3JaYJ4LYypJ0e8_RWWSF2eFCrQdlDfpQX8";

// Create Supabase client with strict authorization requirements
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  },
  global: {
    headers: {
      'X-Client-Info': 'supabase-js-web'
    }
  }
});

// Helper function to check if user is authenticated
export const requireAuth = async () => {
  const { data: { session }, error } = await supabase.auth.getSession();
  
  if (error) {
    console.error('Auth check error:', error);
    throw new Error('Authentication check failed');
  }
  
  if (!session) {
    console.error('No active session found');
    throw new Error('Authentication required');
  }
  
  return session;
};

// Authenticated Supabase client that checks auth before operations
export const authenticatedSupabase = {
  from: (table: string) => ({
    select: async (query?: string) => {
      await requireAuth();
      return supabase.from(table).select(query);
    },
    insert: async (data: any) => {
      await requireAuth();
      return supabase.from(table).insert(data);
    },
    update: async (data: any) => {
      await requireAuth();
      return supabase.from(table).update(data);
    },
    delete: async () => {
      await requireAuth();
      return supabase.from(table).delete();
    },
    upsert: async (data: any) => {
      await requireAuth();
      return supabase.from(table).upsert(data);
    }
  })
};
